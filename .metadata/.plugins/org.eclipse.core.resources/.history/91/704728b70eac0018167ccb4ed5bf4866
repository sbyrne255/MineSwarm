package me.cutrats110;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.bukkit.Bukkit;
import org.bukkit.event.Listener;
import org.bukkit.plugin.Plugin;

public class ScheduledBackupDB implements Listener {
	public Plugin plugin;
	public Database db = null;
	private String destDir = System.getProperty("user.dir") +"/plugins/Mineswarm/backups/";
	private String sourceDir = System.getProperty("user.dir") +"/plugins/Mineswarm/";
	public MineswarmTeams teams = null;
	
	public ScheduledBackupDB(Plugin instance, MineswarmTeams teams) {
		plugin = instance;
		Bukkit.getServer().getPluginManager().registerEvents(this, plugin);
		this.db = new Database(plugin);
		this.teams = teams;
		backup();
		backupPlayerData();	
		teams.saveTeamData();
	}
	public void backupTeamData(){
		Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin, new Runnable() {
		    public void run() {
		    	plugin.getLogger().info("Scheduled Team Data being serialized...");
		    	teams.saveTeamData();
		    }
		}, (2), (((20*1)*60)*5));//runs every 5 minutes
		//20t = 1s
		//20*10 = 10 seconds...
	}
	public void backupPlayerData(){
		Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin, new Runnable() {
		    public void run() {
		    	plugin.getLogger().info("Scheduled Player Database Backup Starting...");
		    	String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
		    	try {
		    	    File directory = new File(destDir);
		    		if (! directory.exists()){ directory.mkdir(); }
		    		
			    	File source = new File(sourceDir + "playerdata.db");
			    	File dest = new File(destDir + timeStamp + "_playerdata.db");
			    	FileUtils.copyFile(source, dest);
		    	    
		    	    //Delete files older than 1 days.
		    	    final File[] listFiles = directory.listFiles();
		    	    Calendar cal = Calendar.getInstance();  
		    	    cal.add(Calendar.DAY_OF_MONTH, 1 * -1); 
		    	    
		            for(File listFile : listFiles) {
		            	if(listFile.lastModified() < cal.getTimeInMillis()) {
		                    listFile.delete();
		                }
		            }
		    	    
		    	} catch (IOException e) {
		    		plugin.getLogger().info(e.toString());
		    	} catch (Exception e) {
					plugin.getLogger().info(e.toString());
				}		    	
		    }
		}, (2), (((20*1)*60)*20));//runs every 20 minutes
		//20t = 1s
		//20*10 = 10 seconds...
	}
	public void backup(){
		Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin, new Runnable() {
		    public void run() {
		    	plugin.getLogger().info("Scheduled Database Backup Starting...");
		    	String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
		    	try {
		    	    File directory = new File(destDir);
		    		if (! directory.exists()){ directory.mkdir(); }
		    		
			    	File source = new File(sourceDir+"mineswarmChests.db");
			    	File dest = new File(destDir+ timeStamp + "_mineswarmChests.db");
			    	FileUtils.copyFile(source, dest);
		    	    
		    	    source = new File(sourceDir+"mobspawners.db");
			    	dest = new File(destDir + timeStamp + "_mobspawners.db");
			    	FileUtils.copyFile(source, dest);
		    	    
		    	    source = new File(sourceDir + "mineswarm.db");
			    	dest = new File(destDir + timeStamp + "_mineswarm.db");
		    	    FileUtils.copyFile(source, dest);

		    	    
		    	    
		    	    //Delete files older than 5 days.
		    	    final File[] listFiles = directory.listFiles();
		    	    Calendar cal = Calendar.getInstance();  
		    	    cal.add(Calendar.DAY_OF_MONTH, 5 * -1); 
		    	    
		            for(File listFile : listFiles) {
		            	if(listFile.lastModified() < cal.getTimeInMillis()) {
		                    listFile.delete();
		                }
		            }
		    	    
		    	} catch (IOException e) {
		    		plugin.getLogger().info(e.toString());
		    	} catch (Exception e) {
					plugin.getLogger().info(e.toString());
				}		    	
		    }
		}, (0), (((20*1)*60)*240));//runs every 4 hours.
		//20t = 1s
		//20*10 = 10 seconds...
	}
}
	