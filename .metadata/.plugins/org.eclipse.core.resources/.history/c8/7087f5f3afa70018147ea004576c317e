package me.cutrats110;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.metadata.FixedMetadataValue;
import org.bukkit.plugin.Plugin;

public class Kits {
	public Plugin plugin;
	public Database db = null;
	
	public Kits(Plugin instance) {
		plugin = instance;
		this.db = new Database(plugin);
		
	}
	
	void giveKit(Player player, String kit) {
		//Read standard items (all players get).
		//Check kit against config, if more items needed:
		
		ItemStack guideBook = new ItemStack(Material.WRITTEN_BOOK, 1);
		BookMeta bookMeta = (BookMeta) guideBook.getItemMeta();
		bookMeta.setTitle(plugin.getConfig().getString("guide-title"));
		bookMeta.setAuthor(plugin.getConfig().getString("guide-author"));
		List<String> pages = new ArrayList<String>();
		//256 MAX characters per page.
		for(String page : plugin.getConfig().getStringList("guide-pages")) {
			if(page.length() > 256) {
				plugin.getLogger().info("Warnning, page in guide exceeds maximum number of characters (256) and will be shortened. Please split this page into two pages");
			}
			pages.add(page);
		}
		bookMeta.setPages(pages);
		guideBook.setItemMeta(bookMeta);
		
		player.getInventory().addItem(guideBook);
		
		final DateFormat timeStamp = new SimpleDateFormat("yyyyMMddHHmmss"); 
		List<String> items;
		
    	items = plugin.getConfig().getStringList("solo-class");
    	for(String item : items) {
    		player.getInventory().addItem(new ItemStack(Material.getMaterial(item),1));
    	}
    	player.setMetadata("class",new FixedMetadataValue(plugin, "solo"));
    	player.setMetadata("start_time",new FixedMetadataValue(plugin, timeStamp));
		
		switch (kit.toUpperCase()) {
        case "SOLO":  
        	items = plugin.getConfig().getStringList("solo-class");
        	for(String item : items) {
        		player.getInventory().addItem(new ItemStack(Material.getMaterial(item),1));
        	}
        	player.setMetadata("class",new FixedMetadataValue(plugin, "solo"));
        	player.setMetadata("start_time",new FixedMetadataValue(plugin, timeStamp));
        	break;
        	
        case "TANK":  
        	items = plugin.getConfig().getStringList("tank-class");
        	for(String item : items) {
        		player.getInventory().addItem(new ItemStack(Material.getMaterial(item),1));
        	}
        	player.setMetadata("class",new FixedMetadataValue(plugin, "tank"));
        	player.setMetadata("start_time",new FixedMetadataValue(plugin, timeStamp));
        	break;
        case "ADC":  
        	items = plugin.getConfig().getStringList("adc-class");
        	for(String item : items) {
        		player.getInventory().addItem(new ItemStack(Material.getMaterial(item),1));
        	}
        	player.setMetadata("class",new FixedMetadataValue(plugin, "adc"));
        	player.setMetadata("start_time",new FixedMetadataValue(plugin, timeStamp));
        	break;
        case "SUPPORT":  
        	items = plugin.getConfig().getStringList("support-class");
        	for(String item : items) {
        		player.getInventory().addItem(new ItemStack(Material.getMaterial(item),1));
        	}
        	player.setMetadata("class",new FixedMetadataValue(plugin, "support"));
        	player.setMetadata("start_time",new FixedMetadataValue(plugin, timeStamp));
        	break;
        case "OVERWATCH":  
        	items = plugin.getConfig().getStringList("overwatch-class");
        	for(String item : items) {
        		player.getInventory().addItem(new ItemStack(Material.getMaterial(item),1));
        	}
        	player.setMetadata("class",new FixedMetadataValue(plugin, "overwatch"));
        	player.setMetadata("start_time",new FixedMetadataValue(plugin, timeStamp));
        	break;
        case "ARCHER":  
        	items = plugin.getConfig().getStringList("archer-class");
        	for(String item : items) {
        		player.getInventory().addItem(new ItemStack(Material.getMaterial(item),1));
        	}
        	player.setMetadata("class",new FixedMetadataValue(plugin, "archer"));
        	player.setMetadata("start_time",new FixedMetadataValue(plugin, timeStamp));
        	break;
        case "MAGE":  
        	items = plugin.getConfig().getStringList("mage-class");
        	for(String item : items) {
        		player.getInventory().addItem(new ItemStack(Material.getMaterial(item),1));
        	}
        	player.setMetadata("class",new FixedMetadataValue(plugin, "mage"));
        	player.setMetadata("start_time",new FixedMetadataValue(plugin, timeStamp));
        	break;
        case "ANGERYMAGE":  
        	items = plugin.getConfig().getStringList("angerymage-class");
        	for(String item : items) {
        		player.getInventory().addItem(new ItemStack(Material.getMaterial(item),1));
        	}
        	player.setMetadata("class",new FixedMetadataValue(plugin, "angerymage"));
        	player.setMetadata("start_time",new FixedMetadataValue(plugin, timeStamp));
        	break;
        default: player.sendMessage("We don't know what class that is :/ ");
                 break;
    }
		
		
		
		
		
	}

}
